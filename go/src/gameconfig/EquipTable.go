// Code generated by game config export tool. DO NOT EDIT.
package gameconfig

import (
	"encoding/json"
	"log"
)

// EquipStruct 装备表
type EquipStruct struct {
	// ID ID
	ID uint32
	// ID2Item ID关联的Item
	ID2Item *ItemStruct `json:"-"`
	// Attributes 装备属性
	Attributes []EquipAttStruct
	// Pos 部位
	Pos EquipPosEnum
	// Suit 套装
	Suit []uint32
	// Suit2Equip Suit关联的Equip
	Suit2Equip []*EquipStruct `json:"-"`
}

// EquipTable 装备表
var EquipTable = make(map[uint32]*EquipStruct)

// Unmarshal Unmarshal
func (r EquipStruct) Unmarshal(s []byte) error {
	err := json.Unmarshal(s, &r)
	if err != nil {
		log.Println("error:", err)
	}
	return err
}

// Relate 父子表关联
func (r *EquipStruct) Relate() {
	var ok bool
	r.ID2Item, ok = ItemTable[r.ID]
	if !ok {
		log.Println("error: can't find Item:", r.ID)
	}
	r.Suit2Equip = make([]*EquipStruct, len(r.Suit))
	for i := 0; i < len(r.Suit); i++ {
		r.Suit2Equip[i], ok = EquipTable[r.Suit[i]]
		if !ok {
			log.Println("error: can't find Equip:", r.Suit[i])
		}
	}
}

// EquipTableLoad 数据加载
func EquipTableLoad(s []byte) {
	var data []*EquipStruct
	err := json.Unmarshal(s, &data)
	if err != nil {
		log.Println("error:", err)
		return
	}
	for _, row := range data {
		_, ok := EquipTable[row.ID]
		if ok {
			log.Println("EquipTable replace:", row)
		}
		EquipTable[row.ID] = row
	}
}

// EquipTableRelate 父子表关联
func EquipTableRelate() {
	for _, r := range EquipTable {
		r.Relate()
	}
}
